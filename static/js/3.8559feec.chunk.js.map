{"version":3,"file":"static/js/3.8559feec.chunk.js","mappings":"+OAsCA,SAASA,EAAmBC,GAAwD,IAAvD,OAAEC,EAAM,MAAEC,EAAK,QAAEC,EAAO,WAAEC,EAAU,aAAEC,GAAcL,EAC/E,MAAM,SAAEM,IAAaC,EAAAA,EAAAA,KACfC,GAAcC,EAAAA,EAAAA,QAAO,MACrBC,EAAaT,EAAOU,MAEpBC,GAA4B,IADbF,EAAWG,QAAQP,GAElCK,EAAQD,EAAWI,OACnBC,EAAOd,EAAOc,KAEpB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,KAAA,OAAKF,WAAWG,EAAAA,EAAAA,GAAY,kCAAmCR,GAAW,mCAAmCM,UAC3GC,EAAAA,EAAAA,KAAA,SACEE,IAAKb,EACLS,UAAU,2BACVK,KAAK,WACLC,SAAWC,IACTnB,EAAcoB,IACZA,EAAKC,WAAWzB,EAAQK,MAG5BM,QAASA,OAGbI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,OACEF,UAAU,6BACVU,MAAO,CAAEC,OAAoB,IAAVjB,EAAc,EAAKA,EAAQP,EAAc,KAA5C,QAElBe,EAAAA,EAAAA,KAAA,QAAMF,UAAU,kCAAiCC,SAC9CP,EAAQ,IAAgB,IAAVA,EAAc,SAAW,GAAGA,cAE7CQ,EAAAA,EAAAA,KAAA,SACEF,UAAU,wBACVK,KAAK,OACLO,MAAOd,EACPQ,SAAWC,IACT,MAAMM,EAASN,EAAEM,OACXD,EAAQC,EAAOD,MACfE,EAAiBD,EAAOC,eACxBC,EAAeF,EAAOE,aAC5B3B,EACGoB,IACCA,EAAKQ,cAAchC,EAAQ4B,IAE7B,KACEC,EAAOC,eAAiBA,EACxBD,EAAOE,aAAeA,KAI5BE,YAAa,UAAUhC,EAAQ,UAGnCiB,EAAAA,EAAAA,KAAA,UACEgB,SAAUhC,EAAQW,OAAS,EAC3BG,WAAWG,EAAAA,EAAAA,GAAY,yBAA0BjB,EAAQW,OAAS,GAAK,kCACvE,aAAW,SACXsB,QAASA,KACP/B,EAAcoB,IACZA,EAAKY,aAAapC,UAM9B,CAEe,SAASqC,EAAaC,GAAkC,IAAjC,SAAEC,EAAQ,QAAErC,EAAO,QAAEsC,GAASF,EAClE,MAAOG,IAAUC,EAAAA,EAAAA,MACXvC,GAAawC,EAAAA,EAAAA,SAAQ,IA5E7B,SAAuBzC,GACrB,OAAOA,EAAQ0C,OAAO,CAACzC,EAAY0C,IAC1B1C,EAAa0C,EAAKnC,MAAMG,OAC9B,EACL,CAwEmCiC,CAAc5C,GAAU,CAACA,KACnD6C,EAAYC,EAAaC,IAAkBC,EAAAA,EAAAA,GAAwBV,IACnEW,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,MACrCjC,GAAMZ,EAAAA,EAAAA,QAAO,MAEb8C,GAAWC,EAAAA,EAAAA,aACdC,IACC,GAAIT,IAAcU,EAAAA,EAAAA,KAAiBC,EAAAA,EAAAA,OAAkB,CACrCF,EACRG,iBACN,MAAMnC,GAAOoC,EAAAA,EAAAA,IAAcpB,IACvBqB,EAAAA,EAAAA,IAAYrC,IACdA,EAAKsC,QAET,CACA,OAAO,GAET,CAACf,EAAYP,KAGfuB,EAAAA,EAAAA,WAAU,KACDC,EAAAA,EAAAA,IACLvB,EAAOwB,uBAAuBC,IAAsB,IAArB,YAAEC,GAAaD,EAC5Cd,EAAae,EAAYC,KAAK,KAAMV,EAAAA,EAAAA,UAEtCjB,EAAO4B,gBACLC,EAAAA,GACCd,IACC,MAAMe,EAAQf,EAEd,OAAIe,EAAM1C,SAAWT,EAAIoD,UAClBD,EAAME,UACTxB,IAEFD,GAAaD,IACN,IAKX2B,EAAAA,IAEFjC,EAAO4B,gBAAgBM,EAAAA,GAAoBrB,EAAUoB,EAAAA,IACrDjC,EAAO4B,gBAAgBO,EAAAA,GAAuBtB,EAAUoB,EAAAA,KAEzD,CAACzB,EAAgBR,EAAQM,EAAYP,EAASc,EAAUN,IAE3D,MAAM5C,EAAeA,CAACyE,EAAIC,KACxBrC,EAAOsC,OACL,KACE,MAAMvD,GAAOoC,EAAAA,EAAAA,IAAcpB,IACvBqB,EAAAA,EAAAA,IAAYrC,IACdqD,EAAGrD,IAGP,CAAEsD,cAUAE,GAAYvB,EAAAA,EAAAA,IAAiBN,IAAcJ,EAEjD,OACE7B,EAAAA,EAAAA,KAAA,OAAKF,UAAW,wBAAuBgE,EAAY,UAAY,IAAM5D,IAAKA,EAAIH,UAC5EF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,oBAAmBC,SAAEsB,IAClCrC,EAAQ+E,IAAI,CAACjF,EAAQC,KACpB,MAAMiF,EAAMlF,EAAOmF,IACnB,OACEjE,EAAAA,EAAAA,KAACpB,EAAmB,CAElBM,aAAcA,EACdJ,OAAQA,EACRC,MAAOA,EACPC,QAASA,EACTC,WAAYA,GALP+E,MASXhE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,KAACkE,EAAAA,EAAM,CAACjD,QA1BEkD,KAChBjF,EAAcoB,IACZA,EAAK6D,WAAUC,EAAAA,EAAAA,UAwBiBC,OAAO,EAAKtE,SAAC,qBAOnD,C","sources":["lexical/nodes/PollComponent.jsx"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport './PollNode.css';\n\nimport { useCollaborationContext } from '@lexical/react/LexicalCollaborationContext';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection';\nimport { mergeRegister } from '@lexical/utils';\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  BaseSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n  NodeKey,\n} from 'lexical';\nimport * as React from 'react';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport Button from '../ui/Button';\nimport joinClasses from '../utils/joinClasses';\nimport { $isPollNode, createPollOption } from './PollNode';\n\nfunction getTotalVotes(options) {\n  return options.reduce((totalVotes, next) => {\n    return totalVotes + next.votes.length;\n  }, 0);\n}\n\nfunction PollOptionComponent({ option, index, options, totalVotes, withPollNode }) {\n  const { clientID } = useCollaborationContext();\n  const checkboxRef = useRef(null);\n  const votesArray = option.votes;\n  const checkedIndex = votesArray.indexOf(clientID);\n  const checked = checkedIndex !== -1;\n  const votes = votesArray.length;\n  const text = option.text;\n\n  return (\n    <div className=\"PollNode__optionContainer\">\n      <div className={joinClasses('PollNode__optionCheckboxWrapper', checked && 'PollNode__optionCheckboxChecked')}>\n        <input\n          ref={checkboxRef}\n          className=\"PollNode__optionCheckbox\"\n          type=\"checkbox\"\n          onChange={(e) => {\n            withPollNode((node) => {\n              node.toggleVote(option, clientID);\n            });\n          }}\n          checked={checked}\n        />\n      </div>\n      <div className=\"PollNode__optionInputWrapper\">\n        <div\n          className=\"PollNode__optionInputVotes\"\n          style={{ width: `${votes === 0 ? 0 : (votes / totalVotes) * 100}%` }}\n        />\n        <span className=\"PollNode__optionInputVotesCount\">\n          {votes > 0 && (votes === 1 ? '1 vote' : `${votes} votes`)}\n        </span>\n        <input\n          className=\"PollNode__optionInput\"\n          type=\"text\"\n          value={text}\n          onChange={(e) => {\n            const target = e.target;\n            const value = target.value;\n            const selectionStart = target.selectionStart;\n            const selectionEnd = target.selectionEnd;\n            withPollNode(\n              (node) => {\n                node.setOptionText(option, value);\n              },\n              () => {\n                target.selectionStart = selectionStart;\n                target.selectionEnd = selectionEnd;\n              }\n            );\n          }}\n          placeholder={`Option ${index + 1}`}\n        />\n      </div>\n      <button\n        disabled={options.length < 3}\n        className={joinClasses('PollNode__optionDelete', options.length < 3 && 'PollNode__optionDeleteDisabled')}\n        aria-label=\"Remove\"\n        onClick={() => {\n          withPollNode((node) => {\n            node.deleteOption(option);\n          });\n        }}\n      />\n    </div>\n  );\n}\n\nexport default function PollComponent({ question, options, nodeKey }) {\n  const [editor] = useLexicalComposerContext();\n  const totalVotes = useMemo(() => getTotalVotes(options), [options]);\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey);\n  const [selection, setSelection] = useState(null);\n  const ref = useRef(null);\n\n  const onDelete = useCallback(\n    (payload) => {\n      if (isSelected && $isNodeSelection($getSelection())) {\n        const event = payload;\n        event.preventDefault();\n        const node = $getNodeByKey(nodeKey);\n        if ($isPollNode(node)) {\n          node.remove();\n        }\n      }\n      return false;\n    },\n    [isSelected, nodeKey]\n  );\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerUpdateListener(({ editorState }) => {\n        setSelection(editorState.read(() => $getSelection()));\n      }),\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (payload) => {\n          const event = payload;\n\n          if (event.target === ref.current) {\n            if (!event.shiftKey) {\n              clearSelection();\n            }\n            setSelected(!isSelected);\n            return true;\n          }\n\n          return false;\n        },\n        COMMAND_PRIORITY_LOW\n      ),\n      editor.registerCommand(KEY_DELETE_COMMAND, onDelete, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(KEY_BACKSPACE_COMMAND, onDelete, COMMAND_PRIORITY_LOW)\n    );\n  }, [clearSelection, editor, isSelected, nodeKey, onDelete, setSelected]);\n\n  const withPollNode = (cb, onUpdate) => {\n    editor.update(\n      () => {\n        const node = $getNodeByKey(nodeKey);\n        if ($isPollNode(node)) {\n          cb(node);\n        }\n      },\n      { onUpdate }\n    );\n  };\n\n  const addOption = () => {\n    withPollNode((node) => {\n      node.addOption(createPollOption());\n    });\n  };\n\n  const isFocused = $isNodeSelection(selection) && isSelected;\n\n  return (\n    <div className={`PollNode__container ${isFocused ? 'focused' : ''}`} ref={ref}>\n      <div className=\"PollNode__inner\">\n        <h2 className=\"PollNode__heading\">{question}</h2>\n        {options.map((option, index) => {\n          const key = option.uid;\n          return (\n            <PollOptionComponent\n              key={key}\n              withPollNode={withPollNode}\n              option={option}\n              index={index}\n              options={options}\n              totalVotes={totalVotes}\n            />\n          );\n        })}\n        <div className=\"PollNode__footer\">\n          <Button onClick={addOption} small={true}>\n            Add Option\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["PollOptionComponent","_ref","option","index","options","totalVotes","withPollNode","clientID","useCollaborationContext","checkboxRef","useRef","votesArray","votes","checked","indexOf","length","text","_jsxs","className","children","_jsx","joinClasses","ref","type","onChange","e","node","toggleVote","style","width","value","target","selectionStart","selectionEnd","setOptionText","placeholder","disabled","onClick","deleteOption","PollComponent","_ref2","question","nodeKey","editor","useLexicalComposerContext","useMemo","reduce","next","getTotalVotes","isSelected","setSelected","clearSelection","useLexicalNodeSelection","selection","setSelection","useState","onDelete","useCallback","payload","$isNodeSelection","$getSelection","preventDefault","$getNodeByKey","$isPollNode","remove","useEffect","mergeRegister","registerUpdateListener","_ref3","editorState","read","registerCommand","CLICK_COMMAND","event","current","shiftKey","COMMAND_PRIORITY_LOW","KEY_DELETE_COMMAND","KEY_BACKSPACE_COMMAND","cb","onUpdate","update","isFocused","map","key","uid","Button","addOption","createPollOption","small"],"sourceRoot":""}